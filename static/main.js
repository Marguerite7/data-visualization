// HELLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
// Generated by CoffeeScript 2.4.1
// future features

// force label placement & highlights
// https://bl.ocks.org/mapio/53fed7d84cd1812d6a6639ed7aa83868
// http://bl.ocks.org/MoritzStefaner/1377729

// curved edges
// https://bl.ocks.org/almsuarez/baa897c189ed64ba2bb32cde2876533b

// force tooltip & highlights
// https://bl.ocks.org/almsuarez/4333a12d2531d6c1f6f22b74f2c57102

// align tooltip position when zoomed (mismatch because of transform, translate, scale)
// https://bl.ocks.org/anonymous/3e3e5333ff24a2c9972bc9320dc6f712/f4dcd09a07b5eafdc78efa0cf45948021e003739

// global variables
// [svg, svgNodes, svgLinks, svgTexts, width, height, color, nodes, links, force, node, link, text, zoom, drag, graph] = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
var centerToXY, color, drag, dragended, dragged, dragging, dragstarted, exitHighlight, g, gc20, getTransform, graph, height, hideDetails, init, initUI, isEdgeOf, isEdgeSelected, isLinkOn, isNeighbor, isNodeSelected, isPartOf, isSameEdge, isSameNode, isTextOn, isTooltipOn, link, links, nborsdic, node, nodeColor, nodes, resetCanvas, resetSelected, resetSize, selected, setHighlightByNode, setHighlightByStr, showDetails, simulation, svg, svgLinks, svgNodes, svgTexts, text, tick, url, url2, width, zoom;

svg = null;

g = null;

svgNodes = null;

svgLinks = null;

svgTexts = null;

width = null;

height = null;

color = null;

nodes = null;

links = null;

simulation = null;

node = null;

link = null;

text = null;

zoom = null;

drag = null;

graph = null;

selected = null;

dragging = null;

nborsdic = null;

gc20 = '#3366cc #dc3912 #ff9900 #109618 #990099 #0099c6 #dd4477 #66aa00 #b82e2e #316395 #994499 #22aa99 #aaaa11 #6633cc #e67300 #8b0707 #651067 #329262 #5574a6 #3b3eac'.split(' ');

url = location.search.substr(1, 24) === "https://www.dropbox.com/" ? location.search.substr(1).replace('www.dropbox.com', 'dl.dropboxusercontent.com') : "https://dl.dropboxusercontent.com/s/vn98nq1g5fn6dkk/miserable.json?dl=0";

url2 = '/api';

// initialize ui
init = function() {
  $('#last-updated').text(document.lastModified);
  // initTooltips()
  initUI();
  color = d3.scaleOrdinal().domain([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]).range(gc20);
  drag = d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);
  zoom = d3.zoom().scaleExtent([.1, 10]).on('zoom', function() {
    g.attr('transform', d3.event.transform);
  });
  // render graph
  resetCanvas();
  $('#spinner').show();
  d3.json(url).then(function(data) {
    graph = data;
    // console.log graph
    nborsdic = {};
    $.map(graph.nodes, function(v) {
      nborsdic[v.id] = [];
    });
    $.map(graph.links, function(e) {
      if (!nborsdic.hasOwnProperty(e.source)) {
        nborsdic[e.source] = [];
      }
      if (!nborsdic.hasOwnProperty(e.target)) {
        nborsdic[e.target] = [];
      }
      nborsdic[e.source].push(e.target);
      nborsdic[e.target].push(e.source);
    });
    // simulation
    // .force 'charge', d3.forceManyBody()
    simulation = d3.forceSimulation(graph.nodes).force('charge', d3.forceManyBody().strength(-100)).force('collide', d3.forceCollide()).force('link', d3.forceLink(graph.links).id(function(d) {
      return d.id;
    })).force('center', d3.forceCenter(width / 2, height / 2)).on('tick', tick);
    // link line
    link = svgLinks.selectAll('.link');
    link = link.data(graph.links, function(d) {
      return d.source.id + '-' + d.target.id;
    }).enter().append('line').attr('class', 'link').style('stroke-width', function(d) {
      if (d.hasOwnProperty('value')) {
        return d.value;
      } else {
        return 1;
      }
    }).on('mouseover', function(d) {
      // setHighlightByEdge d, true
      showDetails(d);
    }).on('mouseout', function(d) {
      // exitHighlight()
      hideDetails();
    });
    link.exit().remove();
    // node circle
    node = svgNodes.selectAll('.node');
    node = node.data(graph.nodes, function(d) {
      return d.id;
    }).enter().append('circle').attr('class', 'node').attr('r', function(d) {
      if (d.hasOwnProperty('size')) {
        return d.size;
      } else {
        return 6;
      }
    }).style('fill', function(d) {
      return nodeColor(d);
    // .style 'fill-opacity', '.8'
    }).style('stroke', function(d) {
      return nodeColor(d);
    // .style 'stroke-opacity', '.5'
    // .style 'stroke-width', '5'
    }).call(drag).on('mouseover', function(d) {
      setHighlightByNode(d, true);
      showDetails(d);
    }).on('mouseout', function(d) {
      exitHighlight();
      hideDetails();
    }).on('click', function(d) {
      d3.event.stopPropagation();
      if (!d3.event.defaultPrevented) { // distinguishing from click from dragging
        // node gets selected
        return centerToXY(d.x, d.y, getTransform()[2], 750);
      }
    });
    node.exit().remove();
    // node label
    text = svgTexts.selectAll('.text');
    text = text.data(graph.nodes, function(d) {
      return d.id;
    // .attr 'dx', (d) -> labelOffset + nodeSize d
    }).enter().append('text').attr('class', 'text').attr('dx', function(d) {
      if (d.hasOwnProperty('size')) {
        return d.size + 4;
      } else {
        return 10;
      }
    }).attr('dy', '.35em').attr('font-size', '9pt').text(function(d) {
      if (d.hasOwnProperty('label')) {
        return d.label;
      } else {
        return d.id;
      }
    }).call(drag).on('mouseover', function(d) {
      setHighlightByNode(d, true);
      showDetails(d);
    }).on('mouseout', function(d) {
      exitHighlight();
      hideDetails();
    }).on('click', function(d) {
      d3.event.stopPropagation();
      if (!d3.event.defaultPrevented) { // distinguishing from click from dragging
        // node gets selected
        return centerToXY(d.x, d.y, getTransform()[2], 750);
      }
    });
    text.exit().remove();
    svg.call(zoom.transform, d3.zoomIdentity);
    // drawGraph()
    return $('#spinner').hide();
  });
};

// force computation for every tick
tick = function() {
  text.attr('transform', function(d) {
    return 'translate(' + [d.x, d.y] + ')';
  });
  node.attr('cx', function(d) {
    return d.x;
  }).attr('cy', function(d) {
    return d.y;
  });
  link.attr('x1', function(d) {
    return d.source.x;
  }).attr('y1', function(d) {
    return d.source.y;
  }).attr('x2', function(d) {
    return d.target.x;
  }).attr('y2', function(d) {
    return d.target.y;
  });
};

// node-dragging-related functions
dragstarted = function(d) {
  if (!d3.event.active) {
    simulation.alphaTarget(0.3).restart();
  }
  d.fx = d.x;
  d.fy = d.y;
  dragging = true;
};

dragged = function(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
};

dragended = function(d) {
  if (!d3.event.active) {
    simulation.alphaTarget(0.0001);
  }
  d.fx = null;
  d.fy = null;
  dragging = false;
  exitHighlight();
};

// if not $('#control-force').hasClass 'active' then force.stop()
centerToXY = function(x, y, k, delay) {
  var transform, translate;
  translate = [width / 2 - (k * x), height / 2 - (k * y)];
  transform = d3.zoomIdentity.translate(translate[0], translate[1]).scale(k);
  svg.transition().duration(delay).call(zoom.transform, transform);
};

getTransform = function() {
  return $('svg > g').attr('transform').match(/([\d\.]+)/g).map(parseFloat);
};

nodeColor = function(d) {
  if (d.hasOwnProperty('color')) {
    return d.color;
  }
  if (d.hasOwnProperty('group')) {
    return color(d.group);
  } else {
    return color(1);
  }
};

showDetails = function(d) {
  var tt;
  tt = $('#tooltip');
  tt.html(JSON.stringify(d, ['id', 'label', 'group', 'color', 'size', 'source', 'target', 'value'], 2));
  // tt.html JSON.stringify(d, null, 2)
  if (d.hasOwnProperty('x')) {
    tt.css('left', 10 + d.x);
    tt.css('top', 10 + d.y);
  } else {
    tt.css('left', 10 + (d.source.x + d.target.x) / 2);
    tt.css('top', 10 + (d.source.y + d.target.y) / 2);
  }
  if (isTooltipOn()) {
    tt.removeClass('d-none');
  }
};

hideDetails = function(d) {
  $('#tooltip').addClass('d-none');
};

// init all tooltips
// initTooltips = ->
//   $( -> $('[data-toggle="tooltip"]').tooltip(); return); return
initUI = function() {
  $('.nav-toggle').click(function(event) {
    event.preventDefault();
    if (this.text.split(': ')[1] === 'On') {
      g.selectAll('.' + this.id.split('-')[1]).classed('d-none', true);
      // $('.main-canvas .'+this.id.split('-')[1]).hide()
      this.text = this.text.split(': ')[0] + ': Off';
    } else {
      g.selectAll('.' + this.id.split('-')[1]).classed('d-none', false);
      // $('.main-canvas .'+this.id.split('-')[1]).show()
      this.text = this.text.split(': ')[0] + ': On';
    }
    $(this).blur();
  });
  $('#quick-search').on('keyup search click', function(event) {
    var qsVal;
    if (selected) {
      resetSelected();
    }
    qsVal = $('#quick-search').val();
    if (qsVal.length > 0) {
      setHighlightByStr(qsVal);
    } else {
      exitHighlight();
    }
  });
  $('.modal').on('shown.bs.modal', function(e) {
    $('.nav-link').one('focus', function(e) {
      return $(this).blur();
    });
  });
};

isTextOn = function() {
  return $('#toggle-text').text().split(': ')[1] === 'On';
};

isLinkOn = function() {
  return $('#toggle-link').text().split(': ')[1] === 'On';
};

isTooltipOn = function() {
  return $('#toggle-tooltip').text().split(': ')[1] === 'On';
};

// hover & quick search highlight functions
isNeighbor = function(p, d) {
  return p.id === d.id || nborsdic[d.id].indexOf(p.id) >= 0; // check if p is one of d's neighbors
};

isPartOf = function(p, s) {
  var flagId, flagLabel;
  flagId = p.id.toString().toLowerCase().indexOf(s.toLowerCase()) >= 0;
  flagLabel = p.hasOwnProperty('label') ? p.label.toString().toLowerCase().indexOf(s.toLowerCase()) >= 0 : false;
  return flagId || flagLabel;
};

// check if s [string] is part of p [node] id or label
isSameNode = function(p, d) {
  return p.id === d.id; // check if p [node] is same to d [node]
};

isSameEdge = function(p, d) {
  return (p.source.id === d.source.id && p.target.id === d.target) || (p.source.id === d.target.id && p.target.id === d.source.id); // check if p [edge] is same to d [edge]
};

isEdgeOf = function(p, d) {
  return p.source.id === d.id || p.target.id === d.id; // is p [edge] an edge of d [node]
};

isNodeSelected = function() {
  return selected && !selected.hasOwnProperty('source');
};

isEdgeSelected = function() {
  return selected && selected.hasOwnProperty('source');
};

setHighlightByNode = function(d, hover) {
  if (link !== null) {
    if (!dragging) {
      link.classed('dim', function(p) {
        return !isEdgeOf(p, d);
      }).classed('d-none', function(p) {
        return !isLinkOn() && !isEdgeOf(p, d);
      });
      // .classed 'selected', (p) -> (not hover) and isEdgeSelected() and isSameEdge p,selected
      node.classed('dim', function(p) {
        return !isNeighbor(p, d);
      });
      // .classed 'selected', (p) -> (not hover) and isNodeSelected() and isSameNode p,selected
      text.classed('dim', function(p) {
        return !isNeighbor(p, d);
      }).classed('d-none', function(p) {
        return !isTextOn() && !isNeighbor(p, d);
      });
    }
  }
};

// setHighlightByEdge = (d, hover) ->
//   if link!=null
//     if not dragging
//       link
//         .classed 'dim', (p) -> not isSameEdge p,d
//         .classed 'd-none', (p) -> not isLinkOn() and not isSameEdge p,d
//         .classed 'selected', (p) -> (not hover) and isEdgeSelected() and isSameEdge p,selected
//       node
//         .classed 'dim', (p) -> not isEdgeOf d,p
//         .classed 'selected', (p) -> (not hover) and isNodeSelected() and isSameNode p,selected
//       text
//         .classed 'dim', (p) -> not isEdgeOf d,p
//         .classed 'd-none', (p) -> not isTextOn() and not isEdgeOf d,p
//   return
setHighlightByStr = function(s) {
  // console.log s.toLowerCase()
  if (link !== null) {
    link.classed('dim', true).classed('d-none', function(p) {
      return !isLinkOn();
    });
    // .classed 'selected', (p) -> isEdgeSelected() and isSameEdge p,selected
    node.classed('dim', function(p) {
      return !isPartOf(p, s);
    });
    // .classed 'selected', (p) -> isNodeSelected() and isSameNode p,selected
    text.classed('dim', function(p) {
      return !isPartOf(p, s);
    }).classed('d-none', function(p) {
      return !isTextOn() && !isPartOf(p, s);
    });
  }
};

exitHighlight = function() {
  if (link !== null) {
    if (!dragging) {
      if (selected) {
        if (selected.hasOwnProperty('source')) {
          setHighlightByEdge(selected, false);
        } else {
          setHighlightByNode(selected, false);
        }
      } else {
        if ($('#quick-search').val().length > 0) {
          setHighlightByStr($('#quick-search').val());
        } else {
          link.classed('dim', false).classed('d-none', function(p) {
            return !isLinkOn();
          }).classed('selected', false);
          node.classed('dim', false).classed('selected', false);
          text.classed('dim', false).classed('d-none', function(p) {
            return !isTextOn();
          });
        }
      }
    }
  }
};

resetSelected = function() {
  if (link !== null) {
    selected = null;
    exitHighlight();
  }
};

resetSize = function() {
  width = $('#canvas').width();
  height = $('#canvas').height();
};

// if zoom!=null then zoom.center [width / 2, height / 2]
// if svg!=null then svg.attr "viewBox", "0 0 " + width + " " + height
resetCanvas = function() {
  resetSize();
  // zoom.center [width / 2, height / 2]
  // zoom.translate [0, 0]
  $('#canvas').empty();
  // .attr "viewBox", "0 0 " + width + " " + height
  // .attr 'cursor', 'move'
  svg = d3.select('#canvas').append('svg').attr('class', 'main-canvas').call(zoom);
  // .on 'click', (d) ->
  //   if not d3.event.defaultPrevented then resetSelected()
  //   return
  g = svg.append('g');
  // svg.attr 'transform', d3.zoomIdentity
  svgLinks = g.append('g');
  svgNodes = g.append('g');
  svgTexts = g.append('g');
};

// initialization when document gets ready
$(function() {
  init();
});
